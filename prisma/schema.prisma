generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  salt      String
  address   String?
  firstName String?
  lastName  String?
  dob       DateTime?
  token     String
  role      String   @default("user")
  shops     Shops[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Shops {
  id          String       @id @default(uuid())
  userId      String
  user        Users        @relation(fields: [userId], references: [id])
  label       String
  name        String       @unique
  domain      String?
  team        Boolean      @default(false)
  teamMembers Json         @default("{}")
  categories  Categories[]
  products    Products[]
  payouts     Payouts[]
  apiKey      String
  level       Int          @default(0)
  stats       ShopStats[]
  fee         Int          @default(10)
  balance     Float        @default(0) @db.Float()
  oldBalance  Float        @default(0) @db.Float() 
  servers     Servers[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model ShopStats {
  id             String     @id @default(uuid())
  shopId         String
  shop           Shops      @relation(fields: [shopId], references: [id])
  timestamp      DateTime   @default(now())
  balance        Float
  change         Float
  percentChange  Float
  @@index([shopId])
}

model Categories {
  id        String     @id @default(uuid())
  shopId    String
  shop      Shops      @relation(fields: [shopId], references: [id])
  label     String
  icon      String?
  products  Products[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model Products {
  id              String      @id @default(uuid())
  categories      Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId    String?
  shops           Shops?      @relation(fields: [shopId], references: [id])
  shopId          String?
  label           String
  icon            String?
  hasVariants     Boolean     @default(false)
  variants        Json?       @default("{}")
  price           Decimal
  description     String
  descriptionHtml String
  actions         Json        @default("[]")
  fields          Json        @default("[]")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
}

model Servers {
  id       String  @id @default(uuid())
  name     String
  type     String
  metadata Json    @default("{}")
  shop     Shops?  @relation(fields: [shopId], references: [id])
  shopId   String?
}

model Payments {
  id        String   @id @default(uuid())
  sessionId String   @unique
  type      String
  price     Decimal
  shopId    String
  productId String
  status    String   @default("pending")
  delivered Boolean  @default(false)
  fields    Json     @default("[]")
  actions   Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Payouts {
  id        String   @id @default(uuid())
  shop      Shops?   @relation(fields: [shopId], references: [id])
  shopId    String?
  amount    Float    @db.Float()
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Meta {
  id            String   @id @default(uuid())
  lastUpdated   DateTime @default(now())
}